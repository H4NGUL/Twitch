{
  "core": {
    "loaded": "is loaded and",
    "enabled": "enabled",
    "disabled": "disabled",
    "usage": "Usage",
    "online": "Stream is online for (time)",
    "offline": "Stream is currently offline!",
    "lang-selected": "Bot language is currently set to english",
    "command-parse": "Sorry, (sender), but this command is not correct, use",
    "error": "Sorry, (sender), but something went wrong!"
  },
  "bets": {
      "newBet": "(sender), your current bet is (amount) (pointsName) on (option)!",
      "running": "(sender), bet is already opened! Use !bet close [(options)]",
      "notRunning": "No bet is currently opened, ask mods to open it!",
      "opened": "New bet is opened! Use !bet [(options)] [points] to win! You have only (minutes)min to bet!",
      "notEnoughOptions": "(sender), new bets needs at least 2 options!",
      "info": "Bets are opened! Use !bet [(options)] [points] to win! (time)min left to bet!",
      "parseError": "{core.command-parse} !bet to check usage",
      "diffBet": "(sender), you already made a bet on (option) and you cannot bet to different option!",
      "notEnoughPoints": "Sorry, (sender), but you dont have (amount) (pointsName) to bet!",
      "undefinedBet": "Sorry, (sender), but this bet option doesn't exist, use !bet to check usage",
      "betPercentGain": "Bet percent gain per option was set to (value)%",
      "betCloseTimer": "Bets will be automatically closed after (value)min",
      "refund": "Bets were closed without a winning. All users are refunded!",
      "notOption": "(sender), this option doesn't exist! Bet is not closed, check !bet",
      "closed": "Bets was closed and winning option was (option)! Congratulations to winners!",
      "timeUpBet": "I guess you are too late, (sender), your time for betting is up!",
      "locked": "Betting time is up! No more bets.",
      "zeroBet": "Oh boy, (sender), you cannot bet 0 (pointsName)",
      "lockedInfo": "Bets are opened, but time for betting is up!"
  },
  "alias": {
    "success": {
      "add": "Alias was added to database",
      "remove": "Alias was deleted from database",
      "list": "List of aliases"
    },
    "failed": {
      "add": "This alias already exists in database",
      "remove": "This alias cannot be found in database",
      "list": "List of aliases is empty",
      "parse": "{core.command-parse} !alias"
    }
  },
  "customcmds": {
    "success": {
      "add": "Command was added to database",
      "remove": "Command was deleted from database",
      "list": "List of commands"
    },
    "failed": {
      "add": "This command already exists in database",
      "remove": "This command cannot be found in database",
      "list": "List of commands is empty",
      "parse": "{core.command-parse} !command"
    }
  },
  "keywords": {
    "success": {
      "add": "Keyword was added to database",
      "remove": "Keyword was deleted from database",
      "list": "List of keywords"
    },
    "failed": {
      "add": "This keyword already exists in database",
      "remove": "This keyword cannot be found in database",
      "list": "List of keywords is empty",
      "parse": "{core.command-parse} !keyword"
    }
  },
  "notice": {
    "success": {
      "add": "Notice was added to database",
      "remove": "Notice was deleted from database",
      "list": "List of notices"
    },
    "failed": {
      "add": "This notice already exists in database",
      "notFound": "This notice cannot be found in database",
      "list": "List of notices is empty",
      "parse": "{core.command-parse} !notice"
    },
    "settings": {
      "noticeInterval": "Notice minimal interval succesfully set to (value) minutes",
      "noticeMsgReq": "Notice minimal required message chat count set to (value)"
    }
  },
  "points": {
    "success": {
      "set": "(username) was set to (amount) (pointsName)",
      "give": "(sender) just gave his (amount) (pointsName) to (username)",
      "all": "All online users just received (amount) (pointsName)!",
      "rain": "Make it rain! All online users just received up to (amount) (pointsName)!",
      "add": "(username) just received (amount) (pointsName)!",
      "remove": "Ouch, (amount) (pointsName) was removed from (username)!"
    },
    "failed": {
      "set": "{core.command-parse} !points set [username] [amount]",
      "give": "{core.command-parse} !points give [username] [amount]",
      "giveNotEnough": "Sorry, (sender), you don't have (amount) (pointsName) to give it to (username)",
      "get": "{core.command-parse} !points get [username]",
      "all": "{core.command-parse} !points all [amount]",
      "rain": "{core.command-parse} !makeitrain [amount]",
      "add": "{core.command-parse} !points add [username] [amount]",
      "remove": "{core.command-parse} !points remove [username] [amount]"
    },
    "settings": {
      "pointsName": "Points name was set to (value) format",
      "pointsResponse": "Points response was changed to: (value)",
      "pointsInterval": "Points online interval set to (value) minutes",
      "pointsPerInterval": "Points when online was set to (value) per online interval",
      "pointsIntervalOffline": "Points offline interval set to (value) minutes",
      "pointsPerIntervalOffline": "Points when offline was set to (value) per offline interval"
    },
    "defaults": {
      "pointsName": {
        "single": "point",
        "multi": "points",
        "xmulti": null
      },
      "pointsResponse": "(username) has currently (amount) (pointsName)"
    }
  },
  "songs": {
    "settings": {
      "volume": "Volume succesfully set to (value)%",
      "duration": "Maximum song length set to (value) minutes.",
      "shuffle": "Playlist shuffle - (value)"
    },
    "bannedSong": "Song (title) was banned and will never play again!",
    "bannedSongTimeout": "You've got timeout for posting banned song",
    "unbannedSong": "Song was succesfully unbanned",
    "notBannedSong": "This song was not banned",
    "currentSong": "Current song is (title)",
    "noCurrentSong": "No song is currently playing",
    "isBanned": "Sorry, (sender), but this song is banned",
    "notFound": "Sorry, (sender), but this song was not found",
    "tooLong": "Sorry, (sender), but this song is too long",
    "addedSong": "(title) was added to queue by (sender)",
    "addedSongPlaylist": "(title) was added to playlist",
    "removeSongQueue": "(title) was removed from queue",
    "alreadyInPlaylist": "Song (title) is already in playlist",
    "removeSongPlaylist": "(title) was removed from playlist"
  },
  "price": {
    "success": {
      "set": "Price for !(command) was set to (amount) (pointsName)",
      "remove" : "Price for !(command) was unset",
      "list": "List of prices"
    },
    "failed": {
      "parse": "{core.command-parse} !price",
      "remove": "No price was set for !(command)",
      "list": "List of prices is empty",
      "notEnough": "Sorry, (sender), but you don't have (amount) (pointsName) to use !(command)"
    }
  },
  "rank": {
    "success": {
      "add": "New rank was added to bot",
      "remove" : "Rank was deleted from bot",
      "list": "List of ranks",
      "show": "(sender) have (rank) rank"
    },
    "failed": {
      "parse": "{core.command-parse} !rank help",
      "add": "Rank for this hour already exists",
      "list": "List of ranks is empty",
      "notFound": "No rank is associated with this hour"
    }
  },
  "lastseen": {
    "success": {
      "never": "(username) was never in this channel!",
      "time": "(username) was last seen at (when) in this channel"
    },
    "failed": {
      "parse": "{core.command-parse} !lastseen [username]"
    }
  },
  "watched": {
    "success": {
      "time": "(username) watched this channel for (time) hours"
    },
    "failed": {
      "parse": "{core.command-parse} !watched or !watched [username]"
    }
  },
  "top": {
    "listWatched": "Top (amount) by watch time:",
    "listPoints": "Top (amount) by points:"
  },
  "permissions": {
    "success": {
      "change": "Permission for command was succesfully changed"
    },
    "failed": {
      "parse": "Usage: !permission viewer|mods|owner [command]",
      "noCmd": "Sorry, (sender), but this command is not registered in a bot"
    }
  },
  "moderation": {
    "links": "No links allowed, ask for !permit",
    "permit": "User (who) can post a link to chat",
    "symbols": "No excessive symbols usage",
    "longMessage": "Long messages are not allowed",
    "caps": "No excessive caps usage",
    "spam": "Spamming is not allowed",
    "failed": {
      "parsePermit": "{core.command-parse} !permit [username]"
    },
    "warnings": {
      "links": "No links allowed, (sender), ask for !permit [(value) warnings left]",
      "symbols": "No excessive symbols usage, (sender) [(value) warnings left]",
      "longMessage": "Long messages are not allowed, (sender) [(value) warnings left]",
      "caps": "No excessive caps usage, (sender) [(value) warnings left]",
      "spam": "Spamming is not allowed, (sender) [(value) warnings left]"
    },
    "settings": {
      "moderationLinks": "Moderation of links is set to (value)",
      "moderationSymbols": "Moderation of symbols is set to (value)",
      "moderationLongMessage": "Moderation of long messages is set to (value)",
      "moderationCaps": "Moderation of caps is set to (value)",
      "moderationSpam": "Moderation of spam is set to (value)",
      "moderationWarnings": "User will be warned (value) times",
      "moderationWarningsTimeout": "User will be warned with timeout - (value)"
    }
  },
  "settings": {
    "command": {
      "disable": "Command !(command) was disabled",
      "disableParse": "{core.command-parse} !disable [command]",
      "notDisabled": "Command !(command) was not disabled before, not needed to enable it",
      "enable": "Command !(command) was enabled",
      "enableParse": "{core.command-parse} !enable [command]"
    }
  }
}